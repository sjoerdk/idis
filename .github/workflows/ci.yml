name: CI

on: [push, pull_request]

env:
  PYTHON_VERSION: '3.8'

jobs:

  precommit:
    runs-on: ubuntu-latest
    steps:
      - name: Install Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/checkout@v1
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          python -m pip install pre-commit virtualenv!=20.0.6
          pre-commit install
      - name: Run static code inspections
        run: pre-commit run --all-files

  django-tests:
    needs: [precommit]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install codecov dependencies
        run: |
          python -m pip install codecov pytest-cov
          mkdir -p /tmp/coverage
          chmod a+w /tmp/coverage
      - uses: actions/checkout@v1
      - name: Set the environment
        run: |
          echo ::set-env name=GIT_COMMIT_ID::$(git describe --always --dirty)
          echo ::set-env name=GIT_BRANCH_NAME::$(echo ${{ github.ref }} | cut -d/ -f3- | sed "s/[^[:alnum:]]//g")
          echo ::set-env name=DOCKER_GID::$(getent group docker | cut -d: -f3)
      - name: Build the containers
        run: |
          make -j2 build
      - name: Run the non-transaction tests
        run: |
          docker pull crccheck/hello-world
          docker-compose run --rm -v /tmp/coverage:/tmp/coverage web bash -c "COVERAGE_FILE=/tmp/coverage/.coverage.non-transactions pytest --cov-report= --cov=."
      - name: Upload coverage report to codecov
        run: |
          coverage combine /tmp/coverage/
          codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Push the containers if we're on master
        if: github.ref == 'refs/heads/master'
        run: |
          echo $DOCKER_PASSWORD | docker login --username $DOCKER_USER --password-stdin
          make push
        env:
          DOCKER_USER: idis
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
